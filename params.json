{"name":"WorldView","body":"# WorldView\r\n\r\nWorldView provides an abstraction over OpenLayers with a set of clear & consistent APIs that allows you to perform common usecases with maps. \r\n\r\nUseCases\r\n\r\n1. Displaying a basic map. You can choose between Google, Bing, OSM & so on, basically whatever OpenLayers supports.\r\n2. Showing markers, polygons, lines on the map, with customizable callbacks.\r\n3. Adding interaction to a map with a toolbar which allows you to dynamically add/move markers, polygons, lines etc\r\n\r\nworldview.js objects wrap openlayers objects. A corollary would mean, if you aren't able able to perform a case that is not supported natively by worldview.js, worldview.js objects give you access to OpenLayers objects using which you can perform operations that are possible using OpenLayers.\r\n\r\n## Creating a WorldView\r\n\r\n``` javascript\r\nvar worldview = new WorldView({ \r\n  mapid: 'map',\r\n  imagesPath: \"/path/to/images/\",\r\n  cssPath: \"/path/to/map.css\",\r\n\r\n  layers: {\r\n      'OSM': {},\r\n      'Google Streets': {},\r\n      'Bing Road': {apiKey: yourApiKey}\r\n  },\r\n  initialCoordinates: {\r\n      lon: 77.6,\r\n      lat: 12.655\r\n  },\r\n  initialZoom: 13\r\n});\r\n\r\n```\r\n\r\nThe first layer in the layers object will be shown by default.\r\n\r\nThe worldview object created wraps the [OpenLayers.Map](http://dev.openlayers.org/docs/files/OpenLayers/Map-js.html) object and can be accessed :\r\n\r\n```javascript\r\n  var olMap = worldview.map;\r\n```\r\n\r\n## Vector Layer\r\n\r\nThe Vector Layer is overlayed on the base map and is primarily used to display vector features such as markers, lines, polygons and circles.\r\n\r\n### Initialization\r\n\r\n```javascript\r\n// Custom callback for when a feature is selected\r\nvar onFeatureSelect = function(event) {\r\n  alert(\"Feature \" + event.feature.geometry + \" selected\")\r\n}\r\n\r\n// Custom callback for when a feature is unselected\r\nvar onFeatureUnselect = function(event) {\r\n  alert(\"Feature \" + event.feature.geometry + \" unselected\")\r\n}\r\n\r\nvar vectorLayer = new WorldView.VectorLayer(worldview.map, {\r\n  events: true,\r\n\tfeatureSelected: onFeatureSelect,\r\n\tfeatureUnselected: onFeatureUnselect,\r\n});\r\n```\r\n\r\nThe vectorLayer object created here creates a OpenLayers.Layer.Vector object and is accessible :\r\n\r\n```javascript\r\n  var olVectorLayer = vectorLayer.vectorLayer;\r\n```\r\n\r\nThe onFeatureSelect and onFeatureUnselect callbacks are optional. The callback receives the defualt OpenLayers event object as the parameter. Importantly, to access the feature that fired the callback ;\r\n\r\n```javascript\r\n  var feature = event.feature;\r\n```\r\n\r\nfeature here is a [OpenLayers.Feature.Vector](http://dev.openlayers.org/docs/files/OpenLayers/Feature/Vector-js.html) object.\r\n\r\n\r\n### Drawing a Marker with a latitude/longitude pair\r\n\r\nThe default values are indicated in the comments.\r\n\r\n```javacript\r\nvar lon = 77.6, lat = 12.655;\r\n\r\nvar marker = vectorLayer.addMarker({\r\n  lon: lon,\r\n  lat: lat,\r\n  style: {\r\n     externalGraphic: \"img/marker.png\", // \"img/marker.png\"\r\n     graphicHeight: 25,  // 25\r\n     graphicWidth: 15,   // 15\r\n     graphicOpacity: 1.0 // 1.0\r\n  }\r\n});\r\n\r\n```\r\n\r\nThis function returns a [OpenLayers.Feature.Vector](http://dev.openlayers.org/docs/files/OpenLayers/Feature/Vector-js.html) object.\r\n\r\n### Drawing a Line with a list of latitude/longitude pairs\r\n\r\n```javascript\r\nvar points = [\r\n  {lon: 77.6, lat: 12.655},\r\n  {lon: 77.688, lat: 12.655}\r\n];\r\n\r\nvar line = vectorLayer.addLine({\r\n  points: points,\r\n  style: {\r\n    strokeColor: \"#ff0000\", // \"#ff0000\"\r\n    strokeOpacity: 1.0      // 0.7\r\n  }\r\n});\r\n\r\n```\r\n\r\nThis function returns a [OpenLayers.Feature.Vector](http://dev.openlayers.org/docs/files/OpenLayers/Feature/Vector-js.html) object.\r\n\r\n### Drawing a Polygon with a list of latitude/longitude pairs\r\n\r\n```javascript\r\nvar points = [\r\n  {lon: 77.6, lat: 12.655},\r\n  {lon: 77.688, lat: 12.655},\r\n  {lon:77.55, lat:12.55}\r\n];\r\n\r\nvar polygon = vectorLayer.addPolygon({\r\n  points: points,\r\n  style: {\r\n    strokeColor: \"#ff0000\", // \"#ff0000\"\r\n    strokeOpacity: 1.0,     // 1.0\r\n    fillColor: \"#ff0000\",   // \"#ff0000\"\r\n    fillOpacity: 0.5        // 0.5\r\n  }\r\n});\r\n\r\n```\r\n\r\nThis function returns a [OpenLayers.Feature.Vector](http://dev.openlayers.org/docs/files/OpenLayers/Feature/Vector-js.html) object.\r\n\r\n### Drawing a Circle with a latitude/longitude pair and a radius\r\n\r\n```javascript\r\nvar lon = 77.6, lat = 12.655, radius = 10000;\r\n\r\nvectorLayer.addCircle({\r\n  lon: lon,\r\n  lat: lat,\r\n  radius: radius,\r\n  style: {\r\n    strokeColor: \"#ff0000\", // \"#ff0000\"       \r\n    strokeOpacity: 1.0,     // 1.0\r\n    fillColor: \"#0000ff\",   // \"#0000ff\"\r\n    fillOpacity: 0.5        // 0.5\r\n  }\r\n});\r\n\r\n```\r\n\r\nThis function returns a [OpenLayers.Feature.Vector](http://dev.openlayers.org/docs/files/OpenLayers/Feature/Vector-js.html) object.\r\n\r\n### Attaching a Popup to a feature\r\n\r\nPopups can be either added in an adhoc fashion to vector features or be registered in the feature callbacks (For instance, shown when selected, hidden when un-selected). \r\n\r\nThe popContent defined below can be any HTML content. Ensure you strip out any potentially dangerous tags from the HTML.\r\n\r\n```javascript\r\n\r\nvar markerWithPopup = vectorLayer.addMarker({\r\n  lon: lon,\r\n  lat: lat,\r\n)};\r\n\r\nvar popContent = \"<div style='color:red;margin-top:20px;'>I'm a popup</div>\";\r\n\r\nvar pop = vectorLayer.addPopup({\r\n  feature: markerWithPopup,\r\n  content: popContent,\r\n  width: 300,\r\n  height: 300\r\n});\r\n```\r\n\r\nThe addPopup function returns a [OpenLayers.Popup.FramedCloud](http://dev.openlayers.org/releases/OpenLayers-2.6/doc/apidocs/files/OpenLayers/Popup/FramedCloud-js.html) object.\r\n\r\n### Drawing a Line from a geometry and bounds\r\n\r\n```javascript\r\nvar line_geom = \"LINESTRING(8644765.421588 1420984.1257934,8638382.9297271 1418920.32603)\";\r\nvar line_bounds = [8638382.9297271,1418920.32603,8644765.421588,1420984.1257934];\r\nvectorLayer.addFeatureFromGeometry(lineGeom, lineBounds); // lineBounds is optional\r\n```\r\n\r\n### Drawing a Polygon from a geometry and bounds\r\n\r\n```javascript\r\nvar polygonGeom = \"POLYGON((8631656.4712389 1424118.0439527,8643007.3699377 1423124.3625851,8632917.6822054 1418633.687174,8631656.4712389 1424118.0439527))\";\r\nvar polygonBounds = [8641249.3182874,1418499.9223745,8644746.3123309,1420085.9907112];\r\nvectorLayer.addFeatureFromGeometry(polygonGeom, polygonBounds); // polygonBounds is optional\r\n\r\n```\r\n\r\n## The Toolbar\r\n\r\nThe Toolbar is native to WorldView, in that, it does not wrap any OpenLayers object. This Toolbar is configurable. You can decide which controls you need in the toolbar & the styling that needs to be applied. \r\n\r\nTo initialize the toolbar, you need to first create a vector layer (as illustrated earlier).\r\n\r\n```javascript\r\nworldview.initToolbar({\r\n  vectorLayer: vectorLayer,\r\n  controls: {\r\n    \"navigate\": {},\r\n    \"point\": {},\r\n    \"line\": {},\r\n    \"polygon\": {}\r\n  }\r\n});\r\n\r\n```\r\n\r\nYou can also register a callback that needs to be fired when a feature (point, line, polygon) is added to the map with toolbar.\r\n\r\n```javascript\r\nWorldView.Toolbar.featureAdded = function(feature) {\r\n  console.log(feature.geometry);\r\n}\r\n```\r\n\r\n","tagline":"A small library on top of Openlayers, that makes using maps easy.","google":"UA-32558131-1","note":"Don't delete this file! It's used internally to help with page regeneration."}